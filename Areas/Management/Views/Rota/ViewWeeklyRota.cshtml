@model Dictionary<string, ViewRotaViewModel>
@using ProRota.Areas.Management.ViewModels

@{
    ViewData["Title"] = "ViewWeeklyRota";
    var weekStartingDate = (DateTime)ViewBag.WeekStartingDate;
}

<div class="card shadow-sm p-3 mb-5">
    <div class="card-header text-center">
        <h1 class="display-4">Rota Management</h1>
        <h3>Week Commencing - <b>@weekStartingDate.ToString("dd/MM/yyyy")</b></h3>
    </div>
    <div class="card-body text-center">

        <div class="text-center">
            <a asp-area="Management" asp-controller="Rota" asp-action="Index" class="btn btn-secondary btn-sm">Back to List</a>
        </div>

        <div class="table-responsive">
            <table id="weeklyRotaTable" class="table table-hover">
                <thead>
                    <tr>
                        <th>Employee</th>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                        <th>Saturday</th>
                        <th>Sunday</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var kvp in Model) // Loop through the dictionary
                    {
                        var employeeId = kvp.Key;
                        var employeeData = kvp.Value; // Extract the value (assumed to be a DTO or dynamic object)
                        var shifts = employeeData.Shifts as List<Shift>;
                        var timeOffRequests = employeeData.TimeOffRequests as List<TimeOffRequest>;
                        var employeeName = employeeData.FirstName + " " + employeeData.LastName; // Assuming name is part of the DTO

                        <tr>
                            <td>@employeeName</td>

                            @for (int i = 0; i < 7; i++)
                            {
                                var currentDate = weekStartingDate.AddDays(i);
                                var shift = shifts?.FirstOrDefault(s => s.StartDateTime.HasValue && s.StartDateTime.Value.Date == currentDate.Date);
                                var timeOffRequest = timeOffRequests?.FirstOrDefault(t => t.Date.Date == currentDate.Date);

                                <td>
                                    @if (shift != null)
                                    {
                                        <span>@shift.StartDateTime.Value.ToString("HH:mm") - @shift.EndDateTime.Value.ToString("HH:mm")</span>
                                    }
                                    else if (timeOffRequest != null)
                                    {
                                        <span>HOLIDAY</span>
                                    }
                                    else
                                    {
                                        <span>OFF</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@if (ViewBag.Editable == true)
{
    <script>
        @* Add scripts here for editing shift times, drag/drop functionality *@
    </script>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        highlightTableCellsforWeeklyRota(); // Call the specific function
    });
</script>
