@model ApplicationUser
@using ProRota.Models


<div class="card shadow-sm p-3 mb-5" style="background-color: #f8f9fa; border: none;">
    <div class="card-body">
        <!-- Dashboard Title -->
        <h1 class="card-title text-center mb-4" style="font-weight: bold; color: #343a40;">Welcome to your Dashboard, @Model.FirstName</h1>

        <!-- Upcoming Shifts Section -->
        <h2 class="text-center mb-3" style="font-weight: bold;">Your Upcoming Shifts</h2>

        <div id="table-container" class="table-responsive">
            <!-- Navigation Buttons -->
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <button id="prev-week-btn" class="btn btn-primary btn-sm me-2" onclick="navigateWeek(-1)">Previous Week</button>
                    <button id="current-week-btn" class="btn btn-secondary btn-sm me-2" onclick="initializeWeek()">Back to This Week</button>
                </div>
                <button id="next-week-btn" class="btn btn-primary btn-sm" onclick="navigateWeek(1)">Next Week</button>
            </div>

            <!-- Shifts Table -->
            <table id="pendingShiftsTable" class="table table-bordered table-striped table-hover" style="border-color: lightgray;">
                <thead id="pendingShifts-table-header" class="table-dark">
                    <!-- Header will be populated by JavaScript -->
                </thead>
                <tbody id="pendingShifts-table-body">
                    <!-- Rows will be populated by JavaScript -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<div class="card shadow-sm p-3 mb-5" style="background-color: #f8f9fa; border: none;">
    <div class="card-body">
        <!-- Time-Off Requests Section -->
        <h1 class="card-title text-center mb-4" style="font-weight: bold; color: #343a40;">Your Time-Off Requests</h1>
        <h2 class="text-center" style="font-weight: 500; color: #495057;">
            You've taken <span style="font-weight: bold;">@ViewBag.HolidaysTaken</span> out of <span style="font-weight: bold;">@Model.HolidaysPerYear</span> paid days off.
        </h2>

        <div id="table-container" class="table-responsive">

            <!-- Shifts Table -->
            <table id="timeOffRequestsTable" class="table table-bordered table-striped table-hover" style="border-color: lightgray;">
                <thead id="table-header" class="table-dark">
                    <th>Request Date</th>
                    <th>Paid?</th>
                    <th>Notes</th>
                    <th>Approved?</th>
                </thead>

                @{
                    // Hardcoded TimeOffRequests for demonstration
                    var timeOffRequests = new List<dynamic>
                {
                new { Date = "2025-01-01", IsHoliday = true, Notes = "New Year's Day", IsApproved = true },
                new { Date = "2025-02-14", IsHoliday = false, Notes = "Valentine's Day", IsApproved = false },
                new { Date = "2025-03-17", IsHoliday = true, Notes = "St. Patrick's Day", IsApproved = true },
                new { Date = "2025-04-01", IsHoliday = false, Notes = "April Fool's Day", IsApproved = false }
                };
                }

                <tbody id="table-body">
                    @foreach(var req in timeOffRequests)
                    {
                        <tr>
                            <td>@req.Date</td>
                            <td>
                                <input type="checkbox" disabled @(req.IsHoliday ? "checked" : "") />
                            </td>
                            <td>@req.Notes</td>
                            <td class="text-center" style="background-color: @(req.IsApproved ? "lightgreen" : "lightcoral"); color: black; font-weight: bold;">
                                @(req.IsApproved ? "Approved" : "Denied")
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Call the function defined in site.js
        const shiftsJson = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Shifts))';
        console.log("Shifts JSON:", shiftsJson); // Debugging: Check JSON structure
        initialisePendingShifts(JSON.parse(shiftsJson));
        highlightTableCellsforPendingShifts();
    });
</script>

@* <script>
    const shifts = JSON.parse('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.Shifts))');

    let currentWeekStart; // Tracks the current week's Monday
    const oneWeekMilliseconds = 7 * 24 * 60 * 60 * 1000; // Number of milliseconds in a week

    // Function to initialize the current week based on the earliest shift
    function initializeWeek() {
        const sortedShifts = shifts.map(shift => ({
            ...shift,
            StartDate: shift.StartDateTime ? new Date(shift.StartDateTime).toISOString().split('T')[0] : null
        })).filter(shift => shift.StartDate !== null)
            .sort((a, b) => new Date(a.StartDateTime) - new Date(b.StartDateTime));

        const firstShiftDate = sortedShifts.length > 0 ? new Date(sortedShifts[0].StartDateTime) : new Date();
        currentWeekStart = new Date(firstShiftDate);
        currentWeekStart.setDate(currentWeekStart.getDate() - currentWeekStart.getDay() + 1); // Adjust to Monday
    }

    // Function to populate the table for the current week
    function populateTable() {
        const tableHeader = document.getElementById("pendingShifts-table-header");
        const tableBody = document.getElementById("pendingShifts-table-body");

        // Clear existing content
        tableHeader.innerHTML = "";
        tableBody.innerHTML = "";

        // Build the date range for the current week (Monday to Sunday)
        const dateRange = [];
        for (let i = 0; i < 7; i++) {
            const date = new Date(currentWeekStart);
            date.setDate(currentWeekStart.getDate() + i);
            dateRange.push(date);
        }

        // Generate table headers (Dates)
        const headerRow = document.createElement("tr");
        const dateHeader = document.createElement("th");
        dateHeader.textContent = "Shift Date";
        headerRow.appendChild(dateHeader);

        dateRange.forEach(date => {
            const th = document.createElement("th");
            th.textContent = date.toLocaleDateString();
            headerRow.appendChild(th);
        });
        tableHeader.appendChild(headerRow);

        // Generate table rows (Shift times or "OFF")
        const row = document.createElement("tr");
        const detailsHeader = document.createElement("td");
        detailsHeader.textContent = "Shift Times";
        row.appendChild(detailsHeader);

        dateRange.forEach(date => {
            const shift = shifts.find(s => new Date(s.StartDateTime).toDateString() === date.toDateString());
            const td = document.createElement("td");
            if (shift) {
                td.textContent =
                    new Date(shift.StartDateTime).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }) +
                    " - " +
                    new Date(shift.EndDateTime).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" });
            } else {
                td.textContent = "OFF";
            }
            row.appendChild(td);
        });
        tableBody.appendChild(row);
    }

    // Function to navigate weeks
    function navigateWeek(direction) {
        currentWeekStart = new Date(currentWeekStart.getTime() + direction * oneWeekMilliseconds); // Adjust week
        populateTable(); // Re-populate the table with the new week
        highlightTableCellsforPendingShifts(); // highlight cells after table change
    }

    // Initialize the table on page load
    document.addEventListener("DOMContentLoaded", () => {
        initializeWeek();
        populateTable();
        highlightTableCellsforPendingShifts();
    });

</script> *@
 
